<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>之初 Blog</title>
  
  <subtitle>The harder, the more fortunate</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhichuwy.cn/"/>
  <updated>2019-08-14T02:59:08.929Z</updated>
  <id>https://zhichuwy.cn/</id>
  
  <author>
    <name>之初</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Alg-雪花算法</title>
    <link href="https://zhichuwy.cn/Alg-%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
    <id>https://zhichuwy.cn/Alg-雪花算法/</id>
    <published>2019-08-14T11:07:25.000Z</published>
    <updated>2019-08-14T02:59:08.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Alg-雪花算法</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Alg-雪花算法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="之初-算法" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="雪花算法" scheme="https://zhichuwy.cn/tags/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
    
      <category term="uuid" scheme="https://zhichuwy.cn/tags/uuid/"/>
    
  </entry>
  
  <entry>
    <title>Alg-加密算法</title>
    <link href="https://zhichuwy.cn/Alg-%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://zhichuwy.cn/Alg-加密算法/</id>
    <published>2019-08-14T10:57:13.000Z</published>
    <updated>2019-08-14T02:59:27.034Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Alg-加密算法</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Alg-加密算法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="之初-算法" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="加密算法" scheme="https://zhichuwy.cn/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
      <category term="MD5" scheme="https://zhichuwy.cn/tags/MD5/"/>
    
      <category term="RSA" scheme="https://zhichuwy.cn/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>Alg-KMP</title>
    <link href="https://zhichuwy.cn/Alg-KMP/"/>
    <id>https://zhichuwy.cn/Alg-KMP/</id>
    <published>2019-08-14T10:50:47.000Z</published>
    <updated>2019-08-14T02:59:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Alg-KMP算法</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Alg-KMP算法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="之初-算法" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zhichuwy.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="KMP" scheme="https://zhichuwy.cn/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>模板引擎</title>
    <link href="https://zhichuwy.cn/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>https://zhichuwy.cn/模板引擎/</id>
    <published>2019-08-10T23:43:15.000Z</published>
    <updated>2019-08-14T03:18:27.686Z</updated>
    
    <content type="html"><![CDATA[<div class="myblockquote"><p style="text-align: center;"><font size="5px">模板引擎-FreeMarker、Thymeleaf</font></p></div><a id="more"></a><h3 id="jstl-el"><a href="#jstl-el" class="headerlink" title="jstl el"></a>jstl el</h3><h3 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h3><p><a href="https://blog.csdn.net/xiangcaoyihan/article/details/80930179" target="_blank" rel="noopener">https://blog.csdn.net/xiangcaoyihan/article/details/80930179</a><br><a href="https://www.jianshu.com/p/20fd71b2e6a0" target="_blank" rel="noopener">https://www.jianshu.com/p/20fd71b2e6a0</a></p><h3 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h3><p><a href="https://www.oschina.net/p/thymeleaf" target="_blank" rel="noopener">https://www.oschina.net/p/thymeleaf</a><br><a href="https://www.jianshu.com/p/a842e5b5012e" target="_blank" rel="noopener">https://www.jianshu.com/p/a842e5b5012e</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;myblockquote&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;font size=&quot;5px&quot;&gt;模板引擎-FreeMarker、Thymeleaf&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="之初-框架" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="模板引擎" scheme="https://zhichuwy.cn/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
      <category term="FreeMarker" scheme="https://zhichuwy.cn/tags/FreeMarker/"/>
    
      <category term="Thymeleaf" scheme="https://zhichuwy.cn/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Netty</title>
    <link href="https://zhichuwy.cn/Netty/"/>
    <id>https://zhichuwy.cn/Netty/</id>
    <published>2019-08-10T23:29:30.000Z</published>
    <updated>2019-08-10T16:44:31.418Z</updated>
    
    <content type="html"><![CDATA[<div class="myblockquote"><p style="text-align: center;"><font size="5px">Netty-NIO异步通信框架</font></p></div><a id="more"></a><blockquote><p>参考文章：<br><a href="https://blog.csdn.net/wangmx1993328/article/details/83036285" target="_blank" rel="noopener">https://blog.csdn.net/wangmx1993328/article/details/83036285</a><br><a href="https://blog.csdn.net/qq_27641935/article/details/86543578" target="_blank" rel="noopener">https://blog.csdn.net/qq_27641935/article/details/86543578</a><br><a href="https://blog.csdn.net/zhiguozhu/article/details/50517551" target="_blank" rel="noopener">https://blog.csdn.net/zhiguozhu/article/details/50517551</a></p></blockquote><h3 id="aio-bio-nio"><a href="#aio-bio-nio" class="headerlink" title="aio bio nio"></a>aio bio nio</h3><h3 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h3>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;myblockquote&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;font size=&quot;5px&quot;&gt;Netty-NIO异步通信框架&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="之初-框架" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://zhichuwy.cn/tags/Netty/"/>
    
      <category term="NIO异步通信框架" scheme="https://zhichuwy.cn/tags/NIO%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6/"/>
    
      <category term="RPC" scheme="https://zhichuwy.cn/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>Java 日志</title>
    <link href="https://zhichuwy.cn/Java%20%E6%97%A5%E5%BF%97/"/>
    <id>https://zhichuwy.cn/Java 日志/</id>
    <published>2019-08-09T00:06:19.000Z</published>
    <updated>2019-08-14T03:12:49.789Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>log4j</p></blockquote><blockquote><p>slfj</p></blockquote><a id="more"></a><h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><hr><h3 id="slfj"><a href="#slfj" class="headerlink" title="slfj"></a>slfj</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;log4j&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;slfj&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="之初-框架" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="日志框架" scheme="https://zhichuwy.cn/tags/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
      <category term="log4j" scheme="https://zhichuwy.cn/tags/log4j/"/>
    
      <category term="slfj" scheme="https://zhichuwy.cn/tags/slfj/"/>
    
  </entry>
  
  <entry>
    <title>Alg-杨辉三角</title>
    <link href="https://zhichuwy.cn/Alg-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    <id>https://zhichuwy.cn/Alg-杨辉三角/</id>
    <published>2019-08-09T00:06:19.000Z</published>
    <updated>2019-08-10T16:46:53.378Z</updated>
    
    <content type="html"><![CDATA[<div class="myblockquote"><p style="text-align: center;"><font size="5px">小Q的歌单(牛客算法-杨辉三角)</font></p></div><a id="more"></a><h3 id="小Q的歌单-牛客算法-杨辉三角"><a href="#小Q的歌单-牛客算法-杨辉三角" class="headerlink" title="小Q的歌单(牛客算法-杨辉三角)"></a>小Q的歌单(牛客算法-杨辉三角)</h3><p>【题目描述】小 Q 有 X 首长度为 A 的不同的歌和 Y 首长度为 B 的不同的歌，现在小 Q 想用这些歌组成一个<br>总长度正好为 K 的歌单，每首歌最多只能在歌单中出现一次，在不考虑歌单内歌曲的先后顺序的情况下，<br>请问有多少种组成歌单的方法。</p><p>输入描述：<br>每个输入包含一个测试用例。<br>每个测试用例的第一行包含一个整数，表示歌单的总长度 K(1&lt;=K&lt;=1000)。<br>接下来的一行包含四个正整数，分别表示歌的第一种长度 A(A&lt;=10)和数量 X(X&lt;=100)以及歌的第二种长度<br>B(B&lt;=10)和数量 Y(Y&lt;=100)。保证 A 不等于 B。</p><p>输出描述：<br>输出一个整数,表示组成歌单的方法取模。因为答案可能会很大,输出对 1000000007 取模的结果。<br>输入示例：<br>5<br>2 3 3 3</p><p>输出示例：<br>9</p><p>解决方案：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c[<span class="number">105</span>][<span class="number">105</span>];  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">c[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">100</span>; j++)</span><br><span class="line">c[i][j] = (c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i - <span class="number">1</span>][j]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, a, b, x, y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;x, &amp;b, &amp;y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i * a &lt;= k &amp;&amp; (k - a * i) % b == <span class="number">0</span> &amp;&amp; (k - a * i) / b &lt;= y)</span><br><span class="line">ans=(ans + (c[x][i] * c[y][(k - a * i) / b]) % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.分析数学模型(公式，杨辉三角…)<br>2.使用编程语言实现</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;myblockquote&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;font size=&quot;5px&quot;&gt;小Q的歌单(牛客算法-杨辉三角)&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="之初-算法" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zhichuwy.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="杨辉三角" scheme="https://zhichuwy.cn/tags/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    
      <category term="牛客" scheme="https://zhichuwy.cn/tags/%E7%89%9B%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://zhichuwy.cn/Docker/"/>
    <id>https://zhichuwy.cn/Docker/</id>
    <published>2019-08-08T23:49:59.000Z</published>
    <updated>2019-08-10T16:50:39.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h3><blockquote><p>参考文章 <a href="https://mp.weixin.qq.com/s/T-yCJSOu_RMtg8nqMAmJfw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/T-yCJSOu_RMtg8nqMAmJfw</a></p></blockquote><a id="more"></a><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker入门&quot;&gt;&lt;a href=&quot;#Docker入门&quot; class=&quot;headerlink&quot; title=&quot;Docker入门&quot;&gt;&lt;/a&gt;Docker入门&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;参考文章 &lt;a href=&quot;https://mp.weixin.qq.com/s/T-yCJSOu_RMtg8nqMAmJfw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/T-yCJSOu_RMtg8nqMAmJfw&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="之初-工具使用" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Docker" scheme="https://zhichuwy.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Jetty</title>
    <link href="https://zhichuwy.cn/Jetty/"/>
    <id>https://zhichuwy.cn/Jetty/</id>
    <published>2019-08-08T23:45:17.000Z</published>
    <updated>2019-08-10T16:59:39.216Z</updated>
    
    <content type="html"><![CDATA[<div class="myblockquote"><p style="text-align: center;"><font size="5px">Jetty-架构、源码学习</font></p></div><a id="more"></a><blockquote><p>参考文章：<br>Jetty学习 <a href="https://my.oschina.net/tryUcatchUfinallyU/blog/110553" target="_blank" rel="noopener">https://my.oschina.net/tryUcatchUfinallyU/blog/110553</a><br>Jetty服务器架构分析上(中、下) <a href="https://blog.csdn.net/lovingprince/article/details/6202669" target="_blank" rel="noopener">https://blog.csdn.net/lovingprince/article/details/6202669</a></p></blockquote><h3 id="Jetty-Tomcat"><a href="#Jetty-Tomcat" class="headerlink" title="Jetty Tomcat"></a>Jetty Tomcat</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;myblockquote&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;font size=&quot;5px&quot;&gt;Jetty-架构、源码学习&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="之初-服务器" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Jetty" scheme="https://zhichuwy.cn/tags/Jetty/"/>
    
      <category term="架构" scheme="https://zhichuwy.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="源码" scheme="https://zhichuwy.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务</title>
    <link href="https://zhichuwy.cn/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    <id>https://zhichuwy.cn/数据库事务/</id>
    <published>2019-08-08T23:40:33.000Z</published>
    <updated>2019-08-10T16:22:28.483Z</updated>
    
    <content type="html"><![CDATA[<div class="myblockquote"><p style="text-align: center;"><font size="5px">数据库事务并发控制和事务隔离级别</font></p></div><a id="more"></a><blockquote><p>参考文章：<br><a href="https://blog.csdn.net/qq_33290787/article/details/51924963" target="_blank" rel="noopener">https://blog.csdn.net/qq_33290787/article/details/51924963</a><br><a href="https://blog.csdn.net/baidu_37107022/article/details/75578140" target="_blank" rel="noopener">https://blog.csdn.net/baidu_37107022/article/details/75578140</a><br><a href="https://blog.csdn.net/wei_cheng18/article/details/82955068" target="_blank" rel="noopener">https://blog.csdn.net/wei_cheng18/article/details/82955068</a><br><a href="https://blog.csdn.net/weixin_30531261/article/details/79479895" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30531261/article/details/79479895</a></p></blockquote><hr><h3 id="数据库语言类型"><a href="#数据库语言类型" class="headerlink" title="数据库语言类型"></a>数据库语言类型</h3><ol><li>数据查询语言（DQL）select</li><li>数据操作语言（DML） insert，update，delete主要用来对数据库的数据进行操作</li><li>数据库定义语言（DDL）create，alter，drop用在定义或改变表的结果，数据类型，表之间的链接和约束（操作是隐性提交的，不能rollback）</li><li>数据库控制语言（DCL）grant，deny，revoke设置或更改数据库用户或角色权限的语句</li></ol><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>概念：满足ACID特性的一组DML操作，可以通过commit提交一个事务，也可以使用rollback进行回滚操作。</p><ol><li>原子性（Atomicity）事务被视为不可分割的最小单元，所有操作要么全部提交成功，要么全部失败回滚。</li><li>一致性（Consistency）事务在执行前后都保持一致性状态，在一致性状态下，所有事务对一个数据的读取结果都是相同的；</li><li>隔离性（Isolation）事务所做的修改在最终提交以前，对其他事务是不可见的；</li><li>持久性（Durability）事务一旦提交则其所做的修改是永久的，即使系统发生崩溃，事务执行的结果也不会丢失。</li></ol><blockquote><p>只有满足一致性，事务的执行结果才是正确的；<br>无并发的情况下，事务串行执行，隔离性一定能满足。此时只要满足原子性，就能满足一致性；<br>在并发情况下，多个事务并行执行，事务不仅要满足原子性，还要满足隔离性，才能满足一致性；<br>事务满足持久性是为了能应对数据库崩溃的情况。事务满足持久性是为了能应对数据库崩溃的情况。</p></blockquote><p>mysql默认采用自动提交模式，也就是说如果不显示的使用start transaction语句来开启一个事务，那么每个查询都会被当做一个事务自动提交。</p><h3 id="并发一致性问题"><a href="#并发一致性问题" class="headerlink" title="并发一致性问题"></a>并发一致性问题</h3><ol><li>丢失修改：事务AB，AB均写入，A写的数据被B覆盖了。</li><li>读脏数据：事务A修改了一个数据，事务B读了数据，事务A撤销了修改，那么B读取的数据是脏数据；一个事务提交之前，人和其他事务不可读取器修改过的值，则可以避免此问题，</li><li>不可重复读：一个事务内，多次读同一数据，结果不一样。（重点在于修改）；如果只有在修改事务完全提交后才可以读取数据，则可以宾冕不可重复读。</li><li>幻读：事务A读取某一范围的数据，事务B插入了新的数据，事务A再次读取这个范围的数据，此时读取的结果和第一次结果不同。（重点在于增加或删除）；在操作事务完成处理数据之前，任何其他事务都不可以添加新数据，则可以避免。</li></ol><h3 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h3><h4 id="封锁粒度"><a href="#封锁粒度" class="headerlink" title="封锁粒度"></a>封锁粒度</h4><ul><li>行级锁和表级锁</li><li>应该尽量只锁定需要修改的部分数据，而不是所有资源，锁定的数据量越少，发生锁争用的可能就越小，并发程度越高；</li><li>加锁需要消耗资源，锁的各种操作会增加系统开销，因此封锁的粒度越小，系统开销越大，需要在开销和并发程度之间做一个权衡。</li></ul><h4 id="封锁类型"><a href="#封锁类型" class="headerlink" title="封锁类型"></a>封锁类型</h4><ul><li>共享锁：也叫S锁，是一种读锁，当一个事务获得了一条数据的共享锁，其他事务也可以获得该共享锁，但不能获得排他锁，表示其他事务可读，但不可写。</li><li>排他锁：也叫X锁，是一种写锁，当一个事务对临界区加上排他锁，其他事务不能获得该临界区的任何锁（包括共享过和排他锁）表示只能一个人去处理数据，其他人不能读也不能写。</li><li>意向锁：使用意向锁可以更容易地支持多粒度封锁；存在行级锁和表级锁的情况下，事务T想对表A加排他锁，需要先检测是否有其他事务对表A或者表A的任意一行加了锁，那么需要对表A的每一行都检测一次，非常耗时；意向锁在原来的X/S锁上引入了IX/IS锁，都是表锁，用来表示一个事务想要在表中的某个数据行上加X锁或S锁，有以下两个规定：<br>1.一个事务在获得某个数据行对象的S锁之前，必须先获得表的IS锁或者更强的锁；<br>2.一个事务在获得某个数据行对象的X锁之前，必须先获得表的IX锁</li></ul><blockquote><p>引入意向锁，事务T想要对表A加X锁，只需要先检测是否有其他事务对表A加了X/IX/S/IS锁，如果加了就表示有其他的事务正在使用这个表或者表中某一行的锁，因此T加X锁失败。<br>1.任意IS/IX锁之间是兼容的，因为他们只是表示想要对表加锁，而不是真正加锁；<br>2.S锁子与S锁和IS锁兼容，也就是说事务T想要对数据加S锁，其他事务可以获得对表或者表中的行的S锁。</p></blockquote><ul><li><p>乐观锁：乐观锁假设认为数据一般情况下不会造成冲突，所以只会对数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果冲突了，则返回用户错误的信息，让用户决定如何去做。实现乐观锁的两种方式：<br>1.使用版本号，为数据增加一个版本标识，读数据时，将version一同读出，数据每更新一次对version加一，当提交更新时，判断数据表对应记录的版本信息与第一次读取出来的version值比对，如果相等，则予以更新，否则，认为是过期数据；<br>2.使用时间戳：增加一个字段，使用时间戳，更新提交时检查当前数据库中数据的时间戳和自己更新前取到的时间戳对比，如果一致则OK，否则就是版本冲突。使用时间戳：增加一个字段，使用时间戳，更新提交时检查当前数据库中数据的时间戳和自己更新前取到的时间戳对比，如果一致则OK，否则就是版本冲突。</p></li><li><p>悲观锁：指的是是对数据被外界（本系统的其他事务，来自外部系统的事务处理）修改持保守的态度。在整个数据处理中，将数据处于锁定的状态；悲观锁的实现，要依靠数据库提供的锁机制。<br>select status from t_items where id=1 for update，另一个事务会阻塞，如果没有for update则不会阻塞</p></li><li>MySQL InnoDB默认Row-Level Lock，只有明确的指定主键或者索引，才会执行Row lock，负责将会执行Table Lock</li><li>共享锁和排他锁都属于悲观锁</li></ul><h4 id="封锁协议"><a href="#封锁协议" class="headerlink" title="封锁协议"></a>封锁协议</h4><p>1.三级封锁协议<br>1)一级封锁协议：事务T要修改数据A时，必须加X锁，知道事务T结束才释放锁；<br>可以解决丢失修改，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改不会被覆盖；<br>2)二级封锁协议：在一级的基础上，要求读取数据A时必须加S锁，读完马上释放S锁；<br>可以解决脏读数据，因为如果一个事务在对数据A进行修改，根据一级等所协议，会加X锁，那么就不能再加S锁了，也就是不会读入数据；<br>3)三级封锁协议：在二级的基础上，要求读取数据A时必须加S锁，直到事务结束才能释放S锁；<br>可以解决不可重复读的问题，因为读A时，其他事务不能对A加X锁，从而避免了在读的期间数据发生改变。</p><p>2.两段锁协议：是指所有事务必须分为两个阶段对数据项加锁和解锁；<br>1)对任何数据进行读写之前，要申请并获得对该数据的封锁；<br>2)每个事务中，所有的封锁请求先于所有的解锁请求。</p><ul><li>可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。事务遵循两段锁协议是保证可串行化调度的充分条件，也就是说：所有事务均遵守两段锁协议，则这些事务的所有交叉调度都是可串行化的；一个可串行化的并发调度的所有事务并不一定都符合两段锁协议。</li><li>遵循两段锁协议可能发生死锁。</li><li>MySQL的InnoDB存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。</li><li>select … lock in share mode; select … for update为显示锁定。</li><li>一次封锁法：要求事务必须一次性将所有要使用的数据全部加锁，否则就不能继续执行，因此一次封锁法遵守两端封锁协议，但两段封锁协议并不要求事务必须一次性将所有要使用的数据全部加锁。这是遵守两端锁协议仍可能发生死锁的原因所在</li></ul><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><ol><li>读未提交：没有解决任何问题，在读取时不会加锁，在更新数据时，对其加行级共享锁（其他事务不能更改，但可以读取，导致脏读），事务结束时释放。</li><li>读已提交：读取的数据是已经提交成功的数据，解决了脏读的问题；给写数据加行级排他锁（写的过程是无法读取的，直到事务处理完毕才释放排他锁）读的数据加行级共享锁，读的时候也是无法写的，但是一旦读完该行就释放共享锁；（事务A负责读，B负责写，A读完数据后释放共享锁，B更新数据，事务还未结束，A在读，两次数据不一样。）</li><li>可重复读：可以重复的读取数据，解决了不可重复读的问题。写的数据加行级排他锁，事务结束释放，读的数据加行级共享锁，事务结束后释放。（事务A负责读，B负责写，A读完数据后等事务结束才释放共享锁，B更新数据，直到事务结束，A再读，两次读到的数据均为A第一次读到的数据，解决了不可重复读。）（事务A负责读，只为读取的数据加行级共享锁，B在A读的过程中向表单中插入数据，A由于处理判断到新的数据，产生幻读。）</li><li>可串行化：可以解决问题。事务一个接着一个执行，代价花费最高，性能最低。（事务读数据则加表级共享锁，事务写数据则加表级排他锁。）</li></ol><h3 id="多版本并发控制（MVCC）"><a href="#多版本并发控制（MVCC）" class="headerlink" title="多版本并发控制（MVCC）"></a>多版本并发控制（MVCC）</h3><p>是MySQL的InnoDB存储引擎实现隔离级别的一种具体方式。用于实现提交度和可重复读这两种隔离解别。（未提交读隔离解别总是读最新的数据行，无需使用MVCC，可串行化隔离级别需要对所有读取的行都加锁，单纯使用MVCC无法实现）。</p><p>版本号：</p><ul><li>系统版本号：一个递增的数字，每开始一个事务，系统版本号就会自动递增；</li><li>事务版本号：事务开始时的系统版本号。<br>隐藏的列：MVCC在每行记录后面都保存着两个隐藏的列，用来存储两个版本号</li></ul><ul><li>创建版本号：指示创建一个数据行的快照时的系统版本号；</li><li>删除版本号：如果该快照的删除版本号大于当前事务版本号表示该快照有效，否则表示该快照已经被删除。</li></ul><p>MVCC使用到的快照存储在Undo日志中，该日志通过回滚指针班一个数据行的所有快照连接起来；</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>当开始一个新的事务时，该事务的版本号肯定会大于当前所有数据行快照的创建版本号；<br>1.select：多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。但是也有例外，如果一个事务正在修改该数据行，那么它可以读取该事务本身所做的修改，而不用和其他事务的读取结果一致。<br>一个没有对数据行做修改的事务T，它所读取的数据行快照的创建版本号必须小于T的版本号，因为如果大于等于则表示该数据行快照时其他事务的最新修改，因此不能去读取它；除此之外，T索要读取的数据行快照的删除版本号必须大于等于T的版本号，因为如果小于等于则表示该数据行快照是已经被删除的，不应该去读取它。<br>2.insert：将当前系统版本号作为数据行快照的创建版本号；<br>3.delete：将当前系统版本号作为数据行快照的删除版本号；<br>4.update：将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。可以理解为先执行delete 后执行insert。</p><h4 id="快照读与当前读"><a href="#快照读与当前读" class="headerlink" title="快照读与当前读"></a>快照读与当前读</h4><p>1.快照读：使用MVCC读取的是快照中的数据，可以减少加锁带来的开销；select * from table…；<br>1)快照读：一致非锁定读，select的时候会生成一个快照；<br>2)生成快照的时机：事务中第一次调用select语句的时候才会生成快照，在此之前事务中执行的uodate, insert, delete操作都不会生成快照；<br>3)READ COMMITED隔离解别下，每次读取都会重新生成一个快照，每次快照都是最新的，因此事务中每次select也可以看到其他已经提交事务所做的更改；REPEATED READ隔离级别下，快照会在事务中第一次select语句执行时生成，只有本事务中对数据进行更改才会更新快照，因此，只有第一次select之前其他已提交事务所做的更改可以看到，但是如果已经执行了seletc，那么其他事务commit数据，select是看不到的。</p><p>2.当前读：读取的是最新的数据，需要加锁；<br>select <em> from table where ? lock in share mode;<br>select </em> from table where ? for update;<br>insert;<br>update;<br>delete;</p><h3 id="InnoDB如何解决幻读问题？"><a href="#InnoDB如何解决幻读问题？" class="headerlink" title="InnoDB如何解决幻读问题？"></a>InnoDB如何解决幻读问题？</h3><p>MVCC、next-key lock、间隙锁</p><ul><li>Record Locks（记录锁）锁定一个记录上的索引，而不是记录本身，如果没有设置索引，InnoDB会自动在主键上创建隐藏的聚簇索引，因此Record Locks依然可以使用；</li><li>Gap Locks（间隙锁）锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其他事务就不能再t.c中插入15，select c from t where c between 10 and 20 for update;</li><li>Next-key Locks是记录锁和间隙锁的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。例如一个索引包含以下值：10,11,13,20，那么就需要锁定以下区间(负无穷, 10], (10, 11], (11, 13], (13, 20], (20, 正无穷)</li></ul><p>InnoDB默认的隔离级别是RR（可重复读），不能解决幻读；MVCC+next-key lock可以解决幻读的问题。（快照读即一般的select靠MVCC解决幻读）（当前读select … for update, select … lock in share mode; insert …; update …; delete …依赖于间隙锁解决）<br>1)间隙锁的主要作用是为了防止出现幻读，会把锁定的方位扩大。控制间隙锁的参数是innodb_locks_unsafe_for_binlog 这个参数的默认值是off，也就是启用间隙锁。<br>2)行锁（record lock）和间隙锁组合起来叫做next-key lock，锁定一个范围，并且锁定记录本身，主要目的是解决幻读的问题。行锁（record lock）和间隙锁组合起来叫做next-key lock，锁定一个范围，并且锁定记录本身，主要目的是解决幻读的问题。</p><blockquote><p>1.间隙锁防止间隙内有数新数据被插入；防止已存在的数据，更新成间隙内的数据；<br>2.InnoDB自动使用间隙锁的条件：必须在RR级别下，检索条件必须有索引。</p></blockquote><p>举一个例子:<br>id(主键)    1 3 6 8 10 13<br>number(二级索引)2 4 5 5  5 11</p><p>mysql&gt; show create table test\G;<br><strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong> 1. row <strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong><br>       Table: test<br>Create Table: CREATE TABLE <code>test</code> (<br>  <code>id</code> int(11) NOT NULL,<br>  <code>number</code> int(11) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>),<br>  KEY <code>number</code> (<code>number</code>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8</p><p>案例：</p><p>session 1:<br>start transaction ;<br>select * from test where number=4 for update;</p><p>session 2:<br>start transaction;<br>insert into test value(0,2);#（执行成功）<br>insert into test value(2,2);#（阻塞）<br>insert into test value(2,4);#（阻塞）<br>insert into test value(2,2);#（阻塞）<br>insert into test value(4,4);#（阻塞）<br>insert into test value(4,5);#（阻塞）<br>insert into test value(7,5);#（执行成功）<br>insert into test value(9,5);#（执行成功）<br>insert into test value(11,5);#（执行成功）</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;myblockquote&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;font size=&quot;5px&quot;&gt;数据库事务并发控制和事务隔离级别&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="之初-数据库" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="事务" scheme="https://zhichuwy.cn/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="并发控制" scheme="https://zhichuwy.cn/tags/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    
      <category term="隔离级别" scheme="https://zhichuwy.cn/tags/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>Volatile</title>
    <link href="https://zhichuwy.cn/Volatile/"/>
    <id>https://zhichuwy.cn/Volatile/</id>
    <published>2019-08-08T23:40:33.000Z</published>
    <updated>2019-08-08T15:40:46.375Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考文章：<br><a href="https://mp.weixin.qq.com/s/kQ498ifh4OUEDd829JIhnQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/kQ498ifh4OUEDd829JIhnQ</a></p></blockquote><h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参考文章：&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/kQ498ifh4OUEDd829JIhnQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com
      
    
    </summary>
    
      <category term="之初-数据库" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Volatile" scheme="https://zhichuwy.cn/tags/Volatile/"/>
    
  </entry>
  
  <entry>
    <title>乐观锁悲观锁</title>
    <link href="https://zhichuwy.cn/%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81/"/>
    <id>https://zhichuwy.cn/乐观锁悲观锁/</id>
    <published>2019-08-08T23:38:42.000Z</published>
    <updated>2019-08-10T16:48:29.130Z</updated>
    
    <content type="html"><![CDATA[<div class="myblockquote"><p style="text-align: center;"><font size="5px">乐观锁 悲观锁</font></p></div><a id="more"></a><blockquote><p>参考文章：<br><a href="https://mp.weixin.qq.com/s/4RKQMA4yF5u7jN9BtS8x_Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/4RKQMA4yF5u7jN9BtS8x_Q</a><br><a href="https://blog.csdn.net/qq_34337272/article/details/81072874" target="_blank" rel="noopener">https://blog.csdn.net/qq_34337272/article/details/81072874</a><br><a href="https://bestzuo.cn" target="_blank" rel="noopener">https://bestzuo.cn</a></p></blockquote><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;myblockquote&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;font size=&quot;5px&quot;&gt;乐观锁 悲观锁&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="之初-数据库" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="乐观锁" scheme="https://zhichuwy.cn/tags/%E4%B9%90%E8%A7%82%E9%94%81/"/>
    
      <category term="悲观锁" scheme="https://zhichuwy.cn/tags/%E6%82%B2%E8%A7%82%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>常见设计模式</title>
    <link href="https://zhichuwy.cn/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zhichuwy.cn/设计模式/</id>
    <published>2019-08-08T23:33:20.000Z</published>
    <updated>2019-08-08T15:53:03.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见的三种设计模式-单例模式，工厂模式，策略模式"><a href="#常见的三种设计模式-单例模式，工厂模式，策略模式" class="headerlink" title="常见的三种设计模式(单例模式，工厂模式，策略模式)"></a>常见的三种设计模式(单例模式，工厂模式，策略模式)</h3><ol><li>单例模式 <blockquote><p>参考文章 <a href="https://mp.weixin.qq.com/s/Yy_KW35Ndlb5v6hQ30_lGQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Yy_KW35Ndlb5v6hQ30_lGQ</a></p></blockquote></li></ol><ol start="2"><li><p>工厂模式</p></li><li><p>策略模式</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常见的三种设计模式-单例模式，工厂模式，策略模式&quot;&gt;&lt;a href=&quot;#常见的三种设计模式-单例模式，工厂模式，策略模式&quot; class=&quot;headerlink&quot; title=&quot;常见的三种设计模式(单例模式，工厂模式，策略模式)&quot;&gt;&lt;/a&gt;常见的三种设计模式(单例模
      
    
    </summary>
    
      <category term="之初-进阶" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="常见设计模式" scheme="https://zhichuwy.cn/tags/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="https://zhichuwy.cn/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="https://zhichuwy.cn/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="https://zhichuwy.cn/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Jackson</title>
    <link href="https://zhichuwy.cn/Jackson/"/>
    <id>https://zhichuwy.cn/Jackson/</id>
    <published>2019-08-08T23:29:11.000Z</published>
    <updated>2019-08-08T15:52:46.976Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java常用Json库性能比较"><a href="#Java常用Json库性能比较" class="headerlink" title="Java常用Json库性能比较"></a>Java常用Json库性能比较</h3><blockquote><p>参考文章 <a href="https://mp.weixin.qq.com/s/Z1u8ERiLPUCz0fR_3ApaiA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Z1u8ERiLPUCz0fR_3ApaiA</a></p></blockquote><h3 id="Demo实践"><a href="#Demo实践" class="headerlink" title="Demo实践"></a>Demo实践</h3><p>Jackson(Eclipse-&gt;云盘)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java常用Json库性能比较&quot;&gt;&lt;a href=&quot;#Java常用Json库性能比较&quot; class=&quot;headerlink&quot; title=&quot;Java常用Json库性能比较&quot;&gt;&lt;/a&gt;Java常用Json库性能比较&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;参考文章 
      
    
    </summary>
    
      <category term="之初-工具使用" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Jackson" scheme="https://zhichuwy.cn/tags/Jackson/"/>
    
      <category term="Json库性能比较" scheme="https://zhichuwy.cn/tags/Json%E5%BA%93%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
    
  </entry>
  
  <entry>
    <title>内存对齐</title>
    <link href="https://zhichuwy.cn/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    <id>https://zhichuwy.cn/内存对齐/</id>
    <published>2019-08-07T23:09:43.000Z</published>
    <updated>2019-08-08T15:53:22.748Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考文章 <a href="https://blog.csdn.net/weixin_40853073/article/details/81451792" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40853073/article/details/81451792</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参考文章 &lt;a href=&quot;https://blog.csdn.net/weixin_40853073/article/details/81451792&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.cs
      
    
    </summary>
    
      <category term="之初-Others积累" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-Others%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="内存对齐" scheme="https://zhichuwy.cn/tags/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    
  </entry>
  
  <entry>
    <title>Alg-洗牌算法优化</title>
    <link href="https://zhichuwy.cn/Alg-%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96/"/>
    <id>https://zhichuwy.cn/Alg-洗牌算法优化/</id>
    <published>2019-08-04T23:26:41.000Z</published>
    <updated>2019-08-05T04:32:11.269Z</updated>
    
    <content type="html"><![CDATA[<div class="myblockquote"><p style="text-align: center;"><font size="3px">数组Card [n=53] 随机产生下标[0..n=53]<br>n– 缩小范围  0 1 2 .. rand ..  n ..<br>每产生一张牌  Card[rand] <--> Card[n–]<br></--></font></p></div><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;myblockquote&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;font size=&quot;3px&quot;&gt;数组Card [n=53] 随机产生下标[0..n=53]&lt;br&gt;n– 缩小范围  0 1 2 .. rand ..  n ..&lt;br&gt;每产生一张牌  Card[rand] &lt;--&gt; Card[n–]&lt;br&gt;&lt;/--&gt;&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="之初-算法" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zhichuwy.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="洗牌算法优化" scheme="https://zhichuwy.cn/tags/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="https://zhichuwy.cn/Nginx/"/>
    <id>https://zhichuwy.cn/Nginx/</id>
    <published>2019-08-04T20:10:47.000Z</published>
    <updated>2019-08-04T15:01:01.764Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nginx配置 (待补充：e^3)</p></blockquote><ul><li>端口</li><li>IP</li><li>分布式</li></ul><a id="more"></a><figure class="highlight java"><figcaption><span>Nginx配置示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">worker_processes  1;</span></span><br><span class="line"><span class="comment">events &#123;</span></span><br><span class="line"><span class="comment">    worker_connections  1024;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">http &#123;</span></span><br><span class="line"><span class="comment">    include             mime.types;</span></span><br><span class="line"><span class="comment">    default_type        application/octet-stream;  </span></span><br><span class="line"><span class="comment">    sendfile            on;    </span></span><br><span class="line"><span class="comment">    keepalive_timeout   65;</span></span><br><span class="line"><span class="comment">    #gzip  on;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    server &#123;</span></span><br><span class="line"><span class="comment">        listen          9090;</span></span><br><span class="line"><span class="comment">        server_name     localhost;</span></span><br><span class="line"><span class="comment">        location / &#123;</span></span><br><span class="line"><span class="comment">            root        html;</span></span><br><span class="line"><span class="comment">            index       index.html index.htm;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        error_page      500 502 503 504  /50x.html;</span></span><br><span class="line"><span class="comment">        location = /50x.html &#123;</span></span><br><span class="line"><span class="comment">            root   html;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    upstream jml&#123;</span></span><br><span class="line"><span class="comment">        server 192.168.139.1:8180;</span></span><br><span class="line"><span class="comment">server 192.168.139.1:8280;</span></span><br><span class="line"><span class="comment">server 192.168.139.1:8380;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    server &#123;</span></span><br><span class="line"><span class="comment">        listen          8080;</span></span><br><span class="line"><span class="comment">        server_name     localhost;</span></span><br><span class="line"><span class="comment">        location / &#123;</span></span><br><span class="line"><span class="comment">            proxy_pass  http://192.168.139.1:8180;</span></span><br><span class="line"><span class="comment">            index       index.jsp index.html index.htm;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>反射去除null字段</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*获取类的字段*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getField</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Field[] fields = o.getClass().getDeclaredFields();</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields ) &#123;</span><br><span class="line">            <span class="comment">//允许操作属性</span></span><br><span class="line">            f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            sb.append(f.getName() + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.substring(<span class="number">0</span>,sb.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*去除没有值的字段*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">filterEmptyValue</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Field[] fields = o.getClass().getDeclaredFields();</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields ) &#123;</span><br><span class="line">            <span class="comment">//允许操作属性</span></span><br><span class="line">            f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (f.get(o) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    Object value = f.get(o);</span><br><span class="line">                    <span class="keyword">if</span> (!StringUtils.isNullOrEmpty(value.toString()))&#123;</span><br><span class="line">                        map.put(f.getName(),value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(ReflectUtils.getField(user));</span><br><span class="line">        System.out.println(ReflectUtils.filterEmptyValue(user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Nginx配置 (待补充：e^3)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;端口&lt;/li&gt;
&lt;li&gt;IP&lt;/li&gt;
&lt;li&gt;分布式&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="之初-服务器" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Nginx" scheme="https://zhichuwy.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>A-学习清单</title>
    <link href="https://zhichuwy.cn/A-%E5%AD%A6%E4%B9%A0%E6%B8%85%E5%8D%95/"/>
    <id>https://zhichuwy.cn/A-学习清单/</id>
    <published>2019-08-04T19:52:19.000Z</published>
    <updated>2019-08-04T11:53:04.646Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h3&gt;
      
    
    </summary>
    
      <category term="之初-进阶" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="https://zhichuwy.cn/tags/Java/"/>
    
      <category term="清单" scheme="https://zhichuwy.cn/tags/%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Alg-Tree</title>
    <link href="https://zhichuwy.cn/Alg-Tree/"/>
    <id>https://zhichuwy.cn/Alg-Tree/</id>
    <published>2019-08-04T19:40:37.000Z</published>
    <updated>2019-08-04T15:25:59.058Z</updated>
    
    <content type="html"><![CDATA[<div class="myblockquote"><p style="text-align: center;"><font size="5px">Tree相关算法汇总</font></p></div><a id="more"></a><h3 id="B-B-树"><a href="#B-B-树" class="headerlink" title="B+ B-树"></a>B+ B-树</h3><hr><h3 id="二叉平衡树"><a href="#二叉平衡树" class="headerlink" title="二叉平衡树"></a>二叉平衡树</h3><hr><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><hr><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p>1.定义(动态)</p><p>2.搜索算法<br>  2.1 return p=非空|null;<br>  2.2return p=非空|f(父结点)</p><p>3.插入算法</p><p>4.删除算法( * p )<br>  4.1p为叶子结点：直接删除<br>  4.2p只有一个孩子结点：上移<br>  4.3p有两个孩子结点:a,b</p><hr><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol><li><p>非递归遍历二叉树</p></li><li><p>递归遍历二叉树</p></li></ol><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;myblockquote&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;font size=&quot;5px&quot;&gt;Tree相关算法汇总&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="之初-算法" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zhichuwy.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Tree" scheme="https://zhichuwy.cn/tags/Tree/"/>
    
      <category term="有道云笔记迁移" scheme="https://zhichuwy.cn/tags/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>Alg-排序</title>
    <link href="https://zhichuwy.cn/Alg-%E6%8E%92%E5%BA%8F/"/>
    <id>https://zhichuwy.cn/Alg-排序/</id>
    <published>2019-08-04T16:40:29.000Z</published>
    <updated>2019-08-04T15:18:11.526Z</updated>
    
    <content type="html"><![CDATA[<div class="myblockquote"><p style="text-align: center;"><font size="5px">排序算法汇总</font></p></div><a id="more"></a><h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">未优化(某一趟两两比较结束, </span></span><br><span class="line"><span class="comment">未发生元素移动,</span></span><br><span class="line"><span class="comment">则r[0..i]为有序序列，终止程序)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void BubbleSort(int[] r) &#123;</span></span><br><span class="line"><span class="comment">    // r[0..n-1] </span></span><br><span class="line"><span class="comment">    int n = r.length;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    // n-1 趟</span></span><br><span class="line"><span class="comment">    //   1 . i . n-1</span></span><br><span class="line"><span class="comment">    // 0 1 2 . . n-1</span></span><br><span class="line"><span class="comment">    // 0 . j</span></span><br><span class="line"><span class="comment">    for(int i=n-1; i&gt;=1; i--) &#123;</span></span><br><span class="line"><span class="comment">        for(int j=0; j&lt;i; j++)&#123;</span></span><br><span class="line"><span class="comment">            if(r[j] &gt; r[j+1])</span></span><br><span class="line"><span class="comment">                r[j] &lt;--&gt; r[j+1];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 优化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (int i = n-1, change = true; i &gt;= 1 &amp;&amp; change; i--) &#123;</span></span><br><span class="line"><span class="comment">    change = false;</span></span><br><span class="line"><span class="comment">    for (int j = 0; j &lt; i; j++)&#123;</span></span><br><span class="line"><span class="comment">        if(r[j] &gt; r[j+1]) &#123;</span></span><br><span class="line"><span class="comment">            r[j] &lt;--&gt; r[j+1];</span></span><br><span class="line"><span class="comment">            change = true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2.快速排序"></a>2.快速排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void QSort (int[] r, int low, int high)&#123;</span></span><br><span class="line"><span class="comment">    if (low &lt; high) &#123;</span></span><br><span class="line"><span class="comment">        int pivotloc = Partition (r, low, high);</span></span><br><span class="line"><span class="comment">        QSort (r, low, pivotloc-1);</span></span><br><span class="line"><span class="comment">        QSort (r, pivotloc+1, high);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int Partition (int[] r, int low, int high) &#123;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    r[0] = r[low];</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    // 1 3 2 #4# 5 6 4</span></span><br><span class="line"><span class="comment">    // 4 1 3 2 4 6 4 </span></span><br><span class="line"><span class="comment">    // 1 3 2 #4# 4 6 4 !!!</span></span><br><span class="line"><span class="comment">    // 4 6 4 return low=high=1;</span></span><br><span class="line"><span class="comment">    // QSort(r,low=1,p-1)退出low=high </span></span><br><span class="line"><span class="comment">    // QSort(r,p+1,high=3) 6 4排序完成</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    while (low &lt; high) &#123;</span></span><br><span class="line"><span class="comment">        // low &lt; high ! </span></span><br><span class="line"><span class="comment">        while (low &lt; high &amp;&amp; r[high] &gt;= r[0]) high--;</span></span><br><span class="line"><span class="comment">        r[low] = r[high];</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        while (low &lt; high &amp;&amp; r[low] &lt;= r[0]) low++;</span></span><br><span class="line"><span class="comment">        r[high] = r[low];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    r[low] = r[0];</span></span><br><span class="line"><span class="comment">    return low;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="3-堆排序"><a href="#3-堆排序" class="headerlink" title="3.堆排序"></a>3.堆排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">以非递减排序为例：</span></span><br><span class="line"><span class="comment">建立大顶堆,调整时堆顶-&gt;h[n--]</span></span><br><span class="line"><span class="comment">数组h[1..n]-&gt;完全二叉树</span></span><br><span class="line"><span class="comment">不同层间元素：整体有序</span></span><br><span class="line"><span class="comment">同一层间元素：先后无序</span></span><br><span class="line"><span class="comment">最后一个非终结结点 i=floor[n/2]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">新建堆：自底向上 h[1..i]</span></span><br><span class="line"><span class="comment">      i--(i&gt;0)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">调整堆：自上向下 h[1..j-1]</span></span><br><span class="line"><span class="comment">      j=n; (j&gt;1); j--;</span></span><br><span class="line"><span class="comment">      h[1]&lt;--&gt;h[j]</span></span><br><span class="line"><span class="comment">      HeapAdjust(h,1,j-1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void HeapAdjust(int[] h, int s, int m) &#123;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    rc = h[s];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 调整 s,自上而下找出大元素</span></span><br><span class="line"><span class="comment">    for (j = s*2; j &lt;= m; j*=2) &#123;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        // 求max(左孩子，右孩子)</span></span><br><span class="line"><span class="comment">        // 左右结点相等[!无影响!]</span></span><br><span class="line"><span class="comment">        // j &lt; m !!!</span></span><br><span class="line"><span class="comment">        if (j &lt; m &amp;&amp; h[j] &lt; h[j+1]) j++;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        // 堆顶 &amp; max 比较</span></span><br><span class="line"><span class="comment">        // h[s]为最大元素,break;</span></span><br><span class="line"><span class="comment">        // 否则交换元素,下轮比较</span></span><br><span class="line"><span class="comment">        if (h[s] &gt;= h[j]) break;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        // 处理方式一：互换元素</span></span><br><span class="line"><span class="comment">        // h[s] &lt;--&gt; h[j];</span></span><br><span class="line"><span class="comment">        // 处理方式二：rc暂存h[s]</span></span><br><span class="line"><span class="comment">        h[s] = h[j];</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        // 向下深一层</span></span><br><span class="line"><span class="comment">        // 切换堆顶元素,后续比较</span></span><br><span class="line"><span class="comment">        s = j;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    h[s] = rc;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void HeapSort(int[] h) &#123;</span></span><br><span class="line"><span class="comment">    // 新建堆</span></span><br><span class="line"><span class="comment">    // 每个非终端结点(层层向上)</span></span><br><span class="line"><span class="comment">    // max,即当前层&gt;=all下方元素</span></span><br><span class="line"><span class="comment">    for (int i = h.length / 2; i &gt; 0; i--) &#123;</span></span><br><span class="line"><span class="comment">        HeapAdjust(h,i,h.length);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    // 调整堆</span></span><br><span class="line"><span class="comment">    // 大堆顶移至尾部,</span></span><br><span class="line"><span class="comment">    // 尾部元素移至堆顶,</span></span><br><span class="line"><span class="comment">    // 调整堆找出次大元素</span></span><br><span class="line"><span class="comment">    for (int j = h.length; j&gt;1; j--) &#123;</span></span><br><span class="line"><span class="comment">        h[1] &lt;--&gt; h[j];</span></span><br><span class="line"><span class="comment">        HeapAdjust(h,1,j-1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="4-直接插入排序"><a href="#4-直接插入排序" class="headerlink" title="4.直接插入排序"></a>4.直接插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void insertSort(int[] r)&#123;</span></span><br><span class="line"><span class="comment">    // n-1 趟</span></span><br><span class="line"><span class="comment">    for (int i = 2; i &lt;= r.length; i++)&#123;</span></span><br><span class="line"><span class="comment">        if (r[i] &lt; r[i-1])&#123;</span></span><br><span class="line"><span class="comment">            r[0] = r[i];</span></span><br><span class="line"><span class="comment">            r[i] = r[i-1];</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            for (int j = i-2; r[0] &lt; r[j]; --j)&#123;</span></span><br><span class="line"><span class="comment">                r[j+1] = r[j];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            r[j+1] = r[0];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">时间复杂度分析(非递增排序)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">比较次数：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[i=2..n]∑i (n+2)(n-1)/2</span></span><br><span class="line"><span class="comment">1次 ：r[i] &amp; r[i-1]</span></span><br><span class="line"><span class="comment">i-1次：r[0] &amp; r[1..i-1]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">移动次数：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[i=2..n]∑(i+1) (n+4)(n-1)/2</span></span><br><span class="line"><span class="comment">1次 ：r[i] -&gt; r[0]</span></span><br><span class="line"><span class="comment">i-1次：r[1..i-1] 后移</span></span><br><span class="line"><span class="comment">1次 ：r[0] -&gt; r[j+1]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="5-折半插入排序"><a href="#5-折半插入排序" class="headerlink" title="5.折半插入排序"></a>5.折半插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于二分查找</span></span><br><span class="line"><span class="comment">适用有序查找</span></span><br><span class="line"><span class="comment">low high最终指向同一个元素</span></span><br><span class="line"><span class="comment">至 high &lt; low 结束</span></span><br><span class="line"><span class="comment">3 4 4 6 7 &amp; 4</span></span><br><span class="line"><span class="comment">4 4 5 6 7</span></span><br><span class="line"><span class="comment">4 5 6 7</span></span><br><span class="line"><span class="comment">4 6 7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void BInsertSort(int[] r) &#123;</span></span><br><span class="line"><span class="comment">    for (i = 2; i &lt;= r.length; i++) &#123;</span></span><br><span class="line"><span class="comment">        r[0] = r[i];</span></span><br><span class="line"><span class="comment">        low = 1; high = i-1;</span></span><br><span class="line"><span class="comment">        while (low &lt;= high) &#123;</span></span><br><span class="line"><span class="comment">            m = (low + high) / 2;</span></span><br><span class="line"><span class="comment">            // &lt; &amp; &lt;= &amp; r[high+1]=r[0]区别</span></span><br><span class="line"><span class="comment">            if(r[0] &lt; r[m]) high = m-1;</span></span><br><span class="line"><span class="comment">            else low = m+1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        /*</span></span><br><span class="line"><span class="comment">        * high=m-1 low ：r[0]&lt;r[m]</span></span><br><span class="line"><span class="comment">        * high low=m+1 ：r[0]&gt;=r[m]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span> (j = i-<span class="number">1</span>; j &gt;= high+<span class="number">1</span>; j--) </span><br><span class="line">            r[j+<span class="number">1</span>] = r[j];</span><br><span class="line">        r[high+<span class="number">1</span>] = r[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="6-归并排序-2-路归并"><a href="#6-归并排序-2-路归并" class="headerlink" title="6.归并排序(2-路归并)"></a>6.归并排序(2-路归并)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：SR[] TR[] 辅助空间</span></span><br><span class="line"><span class="comment">void MSort(int s, int t) &#123;</span></span><br><span class="line"><span class="comment">    // s,m,t </span></span><br><span class="line"><span class="comment">    if (s == t) TR[s] = SR[t];</span></span><br><span class="line"><span class="comment">    // 必须有else,s=t时后续不执行</span></span><br><span class="line"><span class="comment">    else &#123;</span></span><br><span class="line"><span class="comment">        m = (s + t) / 2;</span></span><br><span class="line"><span class="comment">        MSort(s, m);</span></span><br><span class="line"><span class="comment">        MSort(m+1, t);</span></span><br><span class="line"><span class="comment">        Merge(s, m, t);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void Merge(int i,int m,int n) &#123;</span></span><br><span class="line"><span class="comment">    // 类似链表合并</span></span><br><span class="line"><span class="comment">    // k -&gt; TR[k]</span></span><br><span class="line"><span class="comment">    // i .. m m+1 .. t</span></span><br><span class="line"><span class="comment">    //        j</span></span><br><span class="line"><span class="comment">    for (j = m + 1, k = i; i &lt;= m &amp;&amp; j &lt;= n; k++) &#123;</span></span><br><span class="line"><span class="comment">        if(SR[i] &lt;= TR[j])</span></span><br><span class="line"><span class="comment">            TR[k] = SR[i++];</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            TR[k] = SR[j++];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(i&lt;=m) TR[k..n] = SR[i..m];</span></span><br><span class="line"><span class="comment">    if(j&lt;=n) TR[k..n] = SR[j..n];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 增量问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;myblockquote&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;font size=&quot;5px&quot;&gt;排序算法汇总&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="之初-算法" scheme="https://zhichuwy.cn/categories/%E4%B9%8B%E5%88%9D-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zhichuwy.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="有道云笔记迁移" scheme="https://zhichuwy.cn/tags/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB/"/>
    
      <category term="排序" scheme="https://zhichuwy.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
